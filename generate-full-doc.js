// generate-full-doc.js (ESM vers√£o)
import fs from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(
    import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = __dirname;
const outputFile = path.join(projectRoot, "FULL_PROJECT_OVERVIEW.md");

// Fun√ß√£o para percorrer recursivamente o diret√≥rio e retornar a estrutura de √°rvore e lista de arquivos
async function walk(dir, depth = 0) {
    const entries = await fs.readdir(dir);
    let tree = "";
    let files = [];

    for (const entry of entries) {
        // Ignorar node_modules e .git
        if (entry === "node_modules" || entry === ".git") continue;

        const fullPath = path.join(dir, entry);
        const stats = await fs.stat(fullPath);
        const prefix = "  ".repeat(depth) + (stats.isDirectory() ? "üìÅ " : "üìÑ ");

        tree += `${prefix}${entry}\n`;

        if (stats.isDirectory()) {
            const { tree: subTree, files: subFiles } = await walk(fullPath, depth + 1);
            tree += subTree;
            files = files.concat(subFiles);
        } else {
            files.push(fullPath);
        }
    }

    return { tree, files };
}

// Fun√ß√£o para ler o conte√∫do de cada arquivo (assume-se arquivos de texto)
// Se n√£o for poss√≠vel ler, retorna null
async function readFileContent(filePath) {
    try {
        const content = await fs.readFile(filePath, "utf-8");
        return content;
    } catch (err) {
        return null;
    }
}

// Monta o markdown com a √°rvore de arquivos e conte√∫do de cada arquivo
async function buildMarkdown({ tree, files }) {
    let md = `# üßæ Full Overview do Projeto: ${path.basename(projectRoot)}

## üìÇ Estrutura de Pastas

\`\`\`
${tree}
\`\`\`

## üìÑ Conte√∫do dos Arquivos

`;

    for (const file of files) {
        const relPath = path.relative(projectRoot, file);
        // Extens√£o para identificar a linguagem do code block
        const ext = path.extname(file).slice(1) || "";
        const content = await readFileContent(file);

        md += `### ${relPath}
\`\`\`${ext}
${content || "[N√£o foi poss√≠vel ler o conte√∫do]"}
\`\`\`

`;
    }

    return md;
}

async function run() {
    // 1) Gera √°rvore e lista de todos os arquivos
    const { tree, files } = await walk(projectRoot);

    // 2) Monta o Markdown completo
    const md = await buildMarkdown({ tree, files });

    // 3) Grava o arquivo FULL_PROJECT_OVERVIEW.md
    await fs.writeFile(outputFile, md);
    console.log(`‚úÖ Documenta√ß√£o completa gerada em ${outputFile}`);
}

run().catch(err => {
    console.error("Erro ao gerar documenta√ß√£o:", err);
});